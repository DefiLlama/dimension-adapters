import { CHAIN } from "../../helpers/chains";
import { Adapter, FetchOptions, FetchResultV2 } from "../../adapters/types";

const methodology = {
    Fees: 'Cumulative yield generated by yo protocol vaults',
    Revenue: 'Yo protocol does not charge any fees',
}

const YO_USD = '0x0000000f2eB9f69274678c76222B35eEc7588a65'
const YO_ETH = '0x3A43AEC53490CB9Fa922847385D82fe25d0E9De7'
const YO_BTC = '0xbCbc8cb4D1e8ED048a6276a5E94A3e952660BcbC'

async function getTotalSupply(options: FetchOptions, token: string) {
    return await options.api.call({
        target: token,
        abi: 'uint256:totalSupply',
    });
}

async function getPreviousExchangeRate(options: FetchOptions, token: string) {
    return await options.fromApi.call({
        target: token,
        abi: 'uint256:lastPricePerShare',
    }) / 1e18;
}
async function getCurrentExchangeRate(options: FetchOptions, token: string) {
    return await options.toApi.call({
        target: token,
        abi: 'uint256:lastPricePerShare',
    }) / 1e18;
}

async function fetch(options: FetchOptions): Promise<FetchResultV2> {

    const yoUsdSupply = await getTotalSupply(options, YO_USD) / 1e6;
    const yoEthSupply = await getTotalSupply(options, YO_ETH) / 1e18;
    const yoBtcSupply = await getTotalSupply(options, YO_BTC) / 1e8;

    const yoUsdPreviousExchangeRate = await getPreviousExchangeRate(options, YO_USD);
    const yoEthPreviousExchangeRate = await getPreviousExchangeRate(options, YO_ETH);
    const yoBtcPreviousExchangeRate = await getPreviousExchangeRate(options, YO_BTC);

    const yoUsdCurrentExchangeRate = await getCurrentExchangeRate(options, YO_USD);
    const yoEthCurrentExchangeRate = await getCurrentExchangeRate(options, YO_ETH);
    const yoBtcCurrentExchangeRate = await getCurrentExchangeRate(options, YO_BTC);

    const dailyFees = options.createBalances();

    dailyFees.addCGToken('usd-coin', yoUsdSupply * (yoUsdCurrentExchangeRate - yoUsdPreviousExchangeRate));
    dailyFees.addCGToken('ethereum', yoEthSupply * (yoEthCurrentExchangeRate - yoEthPreviousExchangeRate));
    dailyFees.addCGToken('bitcoin', yoBtcSupply * (yoBtcCurrentExchangeRate - yoBtcPreviousExchangeRate));

    return {
        dailyFees,
        dailyRevenue: 0 //As of now, yo doesn't have a protocol fee
    }
}

const adapter: Adapter = {
    version: 2,
    adapter: {
        [CHAIN.BASE]: {
            fetch,
            start: '2025-03-22',
            meta: {
                methodology,
            },
        },
    },
};

export default adapter;
