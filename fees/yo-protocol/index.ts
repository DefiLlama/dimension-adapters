import { CHAIN } from "../../helpers/chains";
import { FetchOptions, FetchResultV2, SimpleAdapter } from "../../adapters/types";

const methodology = {
    Fees: 'Cumulative yield generated by yo protocol vaults',
    Revenue: 'Yo protocol does not charge any fees',
}

const vaults = [
    '0x0000000f2eB9f69274678c76222B35eEc7588a65', // YO_USD
    '0x3A43AEC53490CB9Fa922847385D82fe25d0E9De7', // YO_ETH
    '0xbCbc8cb4D1e8ED048a6276a5E94A3e952660BcbC', // YO_BTC
]

async function fetch(options: FetchOptions): Promise<FetchResultV2> {
    const dailyFees = options.createBalances();

    // get assets
    const assets = await options.api.multiCall({
        abi: 'address:asset',
        calls: vaults,
        permitFailure: true,
    })
    const totalSupplies = await options.api.multiCall({
        abi: 'uint256:totalSupply',
        calls: vaults,
        permitFailure: true,
    })

    const priceShareBefores = await options.fromApi.multiCall({
        abi: 'uint256:lastPricePerShare',
        calls: vaults,
        permitFailure: true,
    })
    const priceShareAfters = await options.toApi.multiCall({
        abi: 'uint256:lastPricePerShare',
        calls: vaults,
        permitFailure: true,
    })

    for (let i = 0; i < vaults.length; i++) {
        const asset = assets[i]
        if (asset) {
            dailyFees.add(asset, Number(totalSupplies[i]) * (Number(priceShareAfters[i]) - Number(priceShareBefores[i])) / 1e18)
        }
    }

    return {
        dailyFees,
        dailySupplySideRevenue: dailyFees,
        dailyRevenue: 0 // As of now, yo doesn't have a protocol fee
    }
}

const adapter: SimpleAdapter = {
    version: 2,
    methodology,
    fetch,
    chains: [CHAIN.BASE],
    start: '2025-01-22'
};

export default adapter;
