import ADDRESSES from '../../helpers/coreAssets.json'
// https://etherfi.gitbook.io/etherfi/liquid/technical-documentation#fees
import { api } from "@defillama/sdk";
import { Adapter, FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { ethers } from "ethers";
const sdk = require('@defillama/sdk')

const HBUSDT_PRICE_AGGREGATOR = "0xAc3d811f5ff30Aa3ab4b26760d0560faf379536A";
const HBUSDT = "0x5e105266db42f78FA814322Bce7f388B4C2e61eb"
const HBXAUT_PRICE_AGGREGATOR = "0xf3dB9f59f9C90495D1c9556fC5737A679720921d"
const HBXAUT = "0x6EB6724D8D3D4FF9E24d872E8c38403169dC05f8"
const HBLSTHYPE_PRICE_AGGREGATOR = "0x2b959a9Deb8e62FaaEA1b226F3bbcbcC0Af31560"
const HBLSTHYPE = "0x81e064d0eB539de7c3170EDF38C1A42CBd752A76"
const BEHYPE_PRICE_AGGREGATOR = "0x1CeaB703956e24b18a0AF6b272E0bF3F499aCa0F"
const BEHYPE = "0x441794D6a8F9A3739F5D4E98a728937b33489D29"
const HBHYPE = "0x96C6cBB6251Ee1c257b2162ca0f39AA5Fa44B1FB"
const HBHYPE_PRICE_AGGREGATOR = "0xDb924A25BfF353f98B066F692c38C3cFacb3a601"
const hbBTC = "0xc061d38903b99aC12713B550C2CB44B221674F94"
const hbBTC_PRICE_AGGREGATOR = "0x9ED559c2Ad1562aE8e919691A84A3320f547B248"





const getTotalSupply = async (options, target) => {
    return await options.api.call({
        target: target,
        abi: "function totalSupply() external view returns (uint256)",
    });
};



const exchangeRateMidasAbi = "function lastAnswer() external view returns (int256)";
const exchangeRateUpshiftAbi = "function latestAnswer() external view returns (int256)";
const getExchangeRateBeforeAfterVaults = async (options, target, abi) => {
    const [exchangeRateBefore, exchangeRateAfter] = await Promise.all([
        options.fromApi.call({
            target: target,
            abi: abi,
            params: [],
        }),
        options.toApi.call({
            target: target,
            abi: abi,
            params: [],
        })])

    return [exchangeRateBefore, exchangeRateAfter]

}


const fetch = async (options: FetchOptions) => {
    const dailyFees = options.createBalances();


    // be hype vault
    const totalSupply_behype = await getTotalSupply(options, BEHYPE);
    const [exchangeRateBeforeBEHYPE, exchangeRateAfterBEHYPE] = await getExchangeRateBeforeAfterVaults(options, BEHYPE_PRICE_AGGREGATOR, exchangeRateMidasAbi);
    dailyFees.addCGToken('hyperliquid', (totalSupply_behype / 1e18) * (exchangeRateAfterBEHYPE / 1e8 - exchangeRateBeforeBEHYPE / 1e8));
    // hbusdt vault
    const totalSupply_hbusdt = await getTotalSupply(options, HBUSDT);
    const [exchangeRateBeforeHBUSDT, exchangeRateAfterHBUSDT] = await getExchangeRateBeforeAfterVaults(options, HBUSDT_PRICE_AGGREGATOR, exchangeRateMidasAbi);
    dailyFees.addCGToken('usdt0', (totalSupply_hbusdt / 1e18) * (exchangeRateAfterHBUSDT / 1e8 - exchangeRateBeforeHBUSDT / 1e8));
    // hbxaut vault
    const totalSupply_hbxaut = await getTotalSupply(options, HBXAUT);
    const [exchangeRateBeforeHBXAUT, exchangeRateAfterHBXAUT] = await getExchangeRateBeforeAfterVaults(options, HBXAUT_PRICE_AGGREGATOR, exchangeRateMidasAbi);
    dailyFees.addCGToken('xaut', (totalSupply_hbxaut / 1e18) * (exchangeRateAfterHBXAUT / 1e8 - exchangeRateBeforeHBXAUT / 1e8));
    //hblsthype vault
    const totalSupply_hblsthype = await getTotalSupply(options, HBLSTHYPE);
    const [exchangeRateBeforeHBLSTHYPE, exchangeRateAfterHBLSTHYPE] = await getExchangeRateBeforeAfterVaults(options, HBLSTHYPE_PRICE_AGGREGATOR, exchangeRateMidasAbi);
    dailyFees.addCGToken('kinetic-staked-hype', (totalSupply_hblsthype / 1e18) * (exchangeRateAfterHBLSTHYPE / 1e8 - exchangeRateBeforeHBLSTHYPE / 1e8));
    //hbhype vault
    const totalSupply_hbhype = await getTotalSupply(options, HBHYPE);
    const [exchangeRateBeforeHBHYPE, exchangeRateAfterHBHYPE] = await getExchangeRateBeforeAfterVaults(options, HBHYPE_PRICE_AGGREGATOR, exchangeRateUpshiftAbi);
    dailyFees.addCGToken('hyperliquid', (totalSupply_hbhype / 1e18) * (exchangeRateAfterHBHYPE / 1e8 - exchangeRateBeforeHBHYPE / 1e8));
    // hbbtc vault
    const totalSupply_hbbtc = await getTotalSupply(options, hbBTC);
    const [exchangeRateBeforeHBTC, exchangeRateAfterHBTC] = await getExchangeRateBeforeAfterVaults(options, hbBTC_PRICE_AGGREGATOR, exchangeRateUpshiftAbi);
    dailyFees.addCGToken('unit-bitcoin', (totalSupply_hbbtc / 1e18) * (exchangeRateAfterHBTC / 1e8 - exchangeRateBeforeHBTC / 1e8));
    return {
        dailyFees,

    };
};

const adapter: Adapter = {
    version: 2,
    adapter: {
        [CHAIN.HYPERLIQUID]: {
            fetch,
            meta: {
                methodology: {
                    Fees: "Fees generated by vaults",
                    Revenue: "Staking/Restaking rewards + Fees on Liquid Vaults",
                },
            },
            start: '2025-05-01',
        },
    },
};

export default adapter;