import { gql, GraphQLClient } from "graphql-request";
import { CHAIN } from "../../helpers/chains";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";

const methodology = {
  Fees: "Swap fees generated by the swap transactions on FlowX CLMM.",
  ProtocolRevenue:
    "Protocol fees charged from the swap fees. Only specific pair charge this fee. Protocol fees = Swap Fees / 6",
};

const getFee = () => {
  return gql`
    query GetClmmExchangeTotalFeesInPeriod(
      $startTime: Float!
      $endTime: Float!
    ) {
      getClmmExchangeTotalFeesInPeriod(
        startTime: $startTime
        endTime: $endTime
      ) {
        totalFees
      }
    }
  `;
};

const graphQLClient = new GraphQLClient(
  "https://api.flowx.finance/flowx-be/graphql"
);

const getGQLClient = () => {
  return graphQLClient;
};

export interface IExchangeStats {
  totalFees: string;
}

const fetch = async ({ fromTimestamp, toTimestamp }: FetchOptions) => {
  const statsRes = await getGQLClient().request(getFee(), {
    startTime: fromTimestamp * 1000,
    endTime: toTimestamp * 1000,
  });
  const totalFees: IExchangeStats = statsRes.getClmmExchangeTotalFeesInPeriod;
  return {
    dailyFees: totalFees.totalFees,
  };
};

const adapter: SimpleAdapter = {
  version: 2,
  adapter: {
    [CHAIN.SUI]: {
      fetch: fetch,
      start: "2024-05-10",
      meta: {
        methodology,
      },
    },
  },
};

export default adapter;
