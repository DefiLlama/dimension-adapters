import { FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getSolanaReceived } from "../../helpers/token";
import { queryDuneSql } from "../../helpers/dune";

const FEE_COLLECTOR_ADDRESS = "Dpo148tVGewDPyh2FkGV18gouWctbdX2fHJopJGe9xv1";
const SOL_BLAZE_STAKE_ACCOUNT = "rsrxDvYUXjH1RQj2Ke36LNZEVqGztATxFkqNukERqFT";
const SOL_BLAZE_AUTHORITY = "6WecYymEARvjG5ZyqkrVQ6YkhPfujNzWpSPwNKXHCbV2";

const fetch = async (_a: any, _b: any, options: FetchOptions) => {
  const query = `
    WITH solblaze_accounts AS (
      SELECT
        d.stake_account_raw,
        d.vote_account_raw,
        a.authority
      FROM dune.dune.result_solana_stake_accounts_vote_delegates AS d
      LEFT JOIN dune.dune.result_solana_stake_accounts_authorities AS a
        ON d.stake_account_raw = a.stake_account_raw
      WHERE
        d.latest = 1
        AND a.latest = 1
        AND a.authority = '${SOL_BLAZE_AUTHORITY}'
      UNION ALL
      SELECT
        '${SOL_BLAZE_STAKE_ACCOUNT}' AS stake_account_raw,
        NULL AS vote_account_raw,
        NULL AS authority
    )
    SELECT
      sum(lamports/1e9) as daily_yield
    FROM solblaze_accounts sa
    LEFT JOIN solana.rewards r
      on r.recipient = sa.stake_account_raw
    AND r.reward_type = 'Staking'
    AND r.block_time >= from_unixtime(${options.startTimestamp})
    AND r.block_time < from_unixtime(${options.endTimestamp})
  `

  const stake_rewards = await queryDuneSql(options, query);
  const dailyFees = options.createBalances();
  dailyFees.addCGToken("solana", stake_rewards[0].daily_yield != null ? stake_rewards[0].daily_yield : 0);

  const dailyRevenue = await getSolanaReceived({
    options,
    target: FEE_COLLECTOR_ADDRESS
  });

  return {
    dailyFees,
    dailyRevenue,
    dailyProtocolRevenue: dailyRevenue,
    dailySupplySideRevenue: dailyFees.subtract(dailyRevenue)
  };
};

const meta = {
  methodology: {
    Fees: 'Staking yield rewards generated by the vault',
    Revenue: 'Includes 0.1% instant withdrawal fee and 0.1% delayed withdrawal fee',
    ProtocolRevenue: 'All fees going to treasury/DAO (50% of total fees) + All fees going to the team(50% of total fees)',
    SupplySideRevenue: 'Staking yield received by BSOL liquid token holders, which is 100% of the staking yield generated by the vault except for the withdrawal fees',
  }
}

export default {
  version: 1,
  adapter: {
    [CHAIN.SOLANA]: {
      fetch,
      start: "2022-12-07",
      meta
    }
  },
  isExpensiveAdapter: true
};
