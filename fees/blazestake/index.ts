import { FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getSqlFromFile, queryDuneSql } from "../../helpers/dune";
import ADDRESSES from "../../helpers/coreAssets.json";

const FEE_COLLECTOR_ADDRESS = "Dpo148tVGewDPyh2FkGV18gouWctbdX2fHJopJGe9xv1";
const SOL_BLAZE_STAKE_ACCOUNT = "rsrxDvYUXjH1RQj2Ke36LNZEVqGztATxFkqNukERqFT";
const SOL_BLAZE_AUTHORITY = "6WecYymEARvjG5ZyqkrVQ6YkhPfujNzWpSPwNKXHCbV2";

const fetch = async (_a: any, _b: any, options: FetchOptions) => {
  const query = getSqlFromFile("helpers/queries/solana-liquid-staking-fees.sql", {
    start: options.startTimestamp,
    end: options.endTimestamp,
    stake_account: SOL_BLAZE_STAKE_ACCOUNT,
    authority: SOL_BLAZE_AUTHORITY
  });
  const stake_rewards = await queryDuneSql(options, query);
  const dailyFees = options.createBalances();
  dailyFees.addCGToken("solana", stake_rewards[0].daily_yield != null ? stake_rewards[0].daily_yield : 0);

  const revenue = await queryDuneSql(options, `
    SELECT
      SUM(amount_display) as bsol_sum
    FROM tokens_solana.transfers
    WHERE to_token_account = '${FEE_COLLECTOR_ADDRESS}'
      AND token_mint_address = '${ADDRESSES.solana.BSOL}'
      AND block_time >= from_unixtime(${options.startTimestamp})
      AND block_time < from_unixtime(${options.endTimestamp});
  `);

  const dailyRevenue = options.createBalances();
  dailyRevenue.addCGToken("blazestake-staked-sol", revenue[0].bsol_sum != null ? revenue[0].bsol_sum: 0);

  return {
    dailyFees,
    dailyRevenue,
    dailyProtocolRevenue: dailyRevenue,
    dailySupplySideRevenue: dailyFees.subtract(dailyRevenue)
  };
};

const meta = {
  methodology: {
    Fees: 'Staking rewards from staked SOL on blazestake',
    Revenue: 'Includes 0.1% instant withdrawal fee and 0.1% delayed withdrawal fee',
    ProtocolRevenue: 'All fees going to treasury/DAO (50% of total fees) + All fees going to the team(50% of total fees)',
    SupplySideRevenue: 'Staking yield received by BSOL liquid token holders, which is 100% of the staking yield generated by the vault except for the withdrawal fees',
  }
}

export default {
  version: 1,
  adapter: {
    [CHAIN.SOLANA]: {
      fetch,
      start: "2022-12-07",
      meta
    }
  },
  isExpensiveAdapter: true
};
