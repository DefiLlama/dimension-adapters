import { FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getSolanaReceived } from "../../helpers/token";
import { queryDuneSql } from "../../helpers/dune";
import ADDRESSES from "../../helpers/coreAssets.json";

const feeCollectorAddress = "Bk2qhUpf3hHZWwpYSudZkbrkA9DVKrNNhQfnH7zF67Ji";

const fetch = async (_a:any, _b:any, options: FetchOptions) => {
  const fees = await queryDuneSql(options, `
    SELECT 
      SUM(amount) / POW(10, 9) as daily_management_fees
    FROM spl_token_solana.spl_token_call_mintTo
    WHERE account_mint = '${ADDRESSES.solana.VSOL}'
      AND account_account = '${feeCollectorAddress}'
      AND call_block_time >= from_unixtime(${options.startTimestamp})
      AND call_block_time < from_unixtime(${options.endTimestamp});
  `);

  const dailyFees = options.createBalances();
  dailyFees.addCGToken("the-vault-staked-sol", fees[0].daily_management_fees * 20);

  const dailyRevenue = await getSolanaReceived({
    options,
    target: feeCollectorAddress
  });

  return {
    dailyFees,
    dailyRevenue,
    dailyProtocolRevenue: dailyRevenue
  };
};

const meta = {
  methodology: {
    Fees: 'staking yield rewards generated by the vault',
    Revenue: 'Includes 0.1% fee for delayed unstaking, 5% fee on staking rewards and a 0.1% fee applies when burning LST tokens created through the LST Creator program',
    ProtocolRevenue: 'Includes 0.1% fee for delayed unstaking, 5% fee on staking rewards and a 0.1% fee applies when burning LST tokens created through the LST Creator program'
  }
}

export default {
  version: 1,
  adapter: {
    [CHAIN.SOLANA]: {
      fetch,
      start: "2024-05-02",
      meta
    }
  },
  isExpensiveAdapter: true
};