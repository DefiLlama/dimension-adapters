import { FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getSolanaReceived } from "../../helpers/token";
import { getSqlFromFile, queryDuneSql } from "../../helpers/dune";

const STAK_POOL_FEE_ACCOUNT = "DG399HKiLgKxGG176QiojyTtiSeqAurK6FVXGfBPTzSD";
const STAKE_POOL_RESERVE_ACCOUNT = "FMAWbzuxsgbgndArunedwxXPA6sweaVUGGgadCpSxau2";
const JUPITER_STAKE_POOL_AUTHORITY = "EMjuABxELpYWYEwjkKmQKBNCwdaFAy4QYAs6W9bDQDNw";

const fetch = async (_a: any, _b: any, options: FetchOptions) => {
  const dailyFees = options.createBalances();

  const query = getSqlFromFile("helpers/queries/solana-liquid-staking-fees.sql", {
    start: options.startTimestamp,
    end: options.endTimestamp,
    stake_account: STAKE_POOL_RESERVE_ACCOUNT,
    authority: JUPITER_STAKE_POOL_AUTHORITY
  });
  const stake_rewards = await queryDuneSql(options, query);

  dailyFees.addCGToken("solana", stake_rewards[0].daily_yield != null ? stake_rewards[0].daily_yield : 0);

  const dailyRevenue = await getSolanaReceived({
    options,
    target: STAK_POOL_FEE_ACCOUNT
  });

  return {
    dailyFees,
    dailyRevenue,
    dailyProtocolRevenue: dailyRevenue,
    dailySupplySideRevenue: dailyFees.subtract(dailyRevenue)
  };
};

const meta = {
  methodology: {
    Fees: 'Staking rewards from staked SOL on jupiter staked solana',
    Revenue: 'Includes withdrawal fees and management fees collected by fee collector',
    ProtocolRevenue: 'Revenue going to treasury/team',
    SupplySideRevenue: 'Staking yield received by JUPSOL liquid token holders, which is 100% of the staking yield generated by the jupiter staked solana',
  }
}

export default {
  version: 1,
  adapter: {
    [CHAIN.SOLANA]: {
      fetch,
      start: "2024-06-09",
      meta
    }
  },
  isExpensiveAdapter: true
};
