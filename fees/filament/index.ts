import request from "graphql-request";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

const endpoint = "https://api.goldsky.com/api/public/project_cm0qvthsz96sp01utcnk55ib0/subgraphs/filament-sei/v3/gn";

const methodology = {
  totalFees:
    "Tracks the cumulative fees (borrowing fees + trading fees) generated by all transactions.",
  dailyFees:
    "Tracks the fees (borrowing fees + trading fees) generated by transactions on a daily basis.",
};

const fetchAllFeeEntries = async (maxPages = 1000, options: FetchOptions): Promise<any[]> => {
  let allEntries: any[] = [];
  let hasMoreData = true;
  let pageCount = 0;
  let lastId = ''

  console.log("Starting fee data collection with pagination");

  while (hasMoreData && pageCount < maxPages) {
    pageCount++;
    const query = `
      query AllFees {
        totalTradingFees(
          first: 1000
          orderBy: id
          orderDirection: desc
          where: {  ${lastId ? 'id_gt: "' + lastId + '"' : ''}  timestamp__gte: ${options.startTimestamp} timestamp__lte: ${options.endTimestamp} } 
        ) {
          id
          timestamp_
          totalFees
        }
      }`


    const response: any = await request(endpoint, query,);

    const { totalTradingFees } = response;
    console.log(pageCount, totalTradingFees.length);
    allEntries.push(...totalTradingFees)
    lastId = totalTradingFees[totalTradingFees.length - 1].id

    // If we got fewer than 1000 entries, we've reached the end
    if (totalTradingFees.length < 1000) {
      hasMoreData = false;
    }
  }

  return allEntries;
};

const fetch = async (options: FetchOptions) => {

  let dailyFees = 0
  // Fetch all available fee entries (with pagination)
  const allEntries = await fetchAllFeeEntries(50, options); // Set max pages to 50 (up to 50,000 entries)


  // Process each fee entry
  allEntries.forEach((entry) => {
    dailyFees += +entry.totalFees / 1e18
  });


  return {
    dailyFees,
  };
};

const adapter: SimpleAdapter = {
  version: 2,
  adapter: {
    [CHAIN.SEI]: {
      fetch,
      start: "2023-01-21",
      meta: {
        methodology,
      },
    },
  },
};

export default adapter;
