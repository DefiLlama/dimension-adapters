import fetchURL from "../../utils/fetchURL";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getUniqStartOfTodayTimestamp } from "../../helpers/getUniSubgraphVolume";
import { getPrices } from "../../utils/prices";

const methodology = {
  Fees: "Fees generated by  Volo vaults and Volo Liquid Staking.",
  Revenue: "Revenue generated by Volo vaults and Volo Liquid Staking.",
  ProtocolRevenue: "Revenue generated by Volo vaults and Volo Liquid Staking.",
};

const convertToDefiLlamaFormat = (suiAddress: string) => {
  return `sui:${suiAddress}`;
};

const fetchData = () => {
  return async ({ startTimestamp, endTimestamp }: FetchOptions) => {
    const targetDate = new Date(endTimestamp * 1000);
    const dateString = targetDate.toISOString().split("T")[0];

    const dailyFeesData = (
      await fetchURL(
        `https://open-api.naviprotocol.io/api/volo/volo-vaults?type=fees&timestamp=${dateString}`
      )
    ).data;

    const dailyRevenueData = (
      await fetchURL(
        `https://open-api.naviprotocol.io/api/volo/volo-vaults?type=revenue&timestamp=${dateString}`
      )
    ).data;

    const tokenAddresses = Object.keys(dailyFeesData).map(
      convertToDefiLlamaFormat
    );
    const prices = await getPrices(tokenAddresses, endTimestamp);

    let dailyFeesUSD = 0;
    let dailyRevenueUSD = 0;

    for (const [tokenKey, amount] of Object.entries(dailyFeesData)) {
      const defiLlamaKey = convertToDefiLlamaFormat(tokenKey);
      if (prices[defiLlamaKey]) {
        const price = prices[defiLlamaKey].price;
        const tokenValueUSD = Number(amount) * price;
        dailyFeesUSD += tokenValueUSD;
      }
    }

    for (const [tokenKey, amount] of Object.entries(dailyRevenueData)) {
      const defiLlamaKey = convertToDefiLlamaFormat(tokenKey);
      if (prices[defiLlamaKey]) {
        const price = prices[defiLlamaKey].price;
        const tokenValueUSD = Number(amount) * price;
        dailyRevenueUSD += tokenValueUSD;
      }
    }

    const dayTimestamp = getUniqStartOfTodayTimestamp(targetDate);

    return {
      dailyFees: dailyFeesUSD,
      dailyRevenue: dailyRevenueUSD,
      dailyProtocolRevenue: dailyRevenueUSD,
      timestamp: dayTimestamp,
    };
  };
};

const adapter: SimpleAdapter = {
  version: 2,
  methodology,
  adapter: {
    [CHAIN.SUI]: {
      fetch: fetchData(),
      start: "2025-08-10",
    },
  },
};

export default adapter;
