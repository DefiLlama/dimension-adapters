import fetchURL from "../../utils/fetchURL";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getUniqStartOfTodayTimestamp } from "../../helpers/getUniSubgraphVolume";

const methodology = {
  Fees: "Fees generated by Volo vaults including performance fees and deposit/withdrawal fees.",
  ProtocolRevenue:
    "Performance fee revenue earned by Volo Vault from vault operations.",
};

const fetchData = () => {
  return async ({ startTimestamp, endTimestamp }: FetchOptions) => {
    const targetDate = new Date(endTimestamp * 1000);
    const dateString = targetDate.toISOString().split("T")[0];

    try {
      const dailyFeesData = (
        await fetchURL(
          `https://open-api.naviprotocol.io/api/volo/volo-vaults?type=fees&timestamp=${dateString}`
        )
      ).data;

      const dailyRevenueData = (
        await fetchURL(
          `https://open-api.naviprotocol.io/api/volo/volo-vaults?type=revenue&timestamp=${dateString}`
        )
      ).data;

      const dailyFees = Object.values(dailyFeesData).reduce(
        (sum: number, fee: any) => sum + fee,
        0
      );
      const dailyRevenue = Object.values(dailyRevenueData).reduce(
        (sum: number, revenue: any) => sum + revenue,
        0
      );

      const dayTimestamp = getUniqStartOfTodayTimestamp(targetDate);

      return {
        dailyFees: dailyFees,
        dailyRevenue: dailyRevenue,
        dailyProtocolRevenue: dailyRevenue,
        timestamp: dayTimestamp,
      };
    } catch (error) {
      console.error("Error fetching Volo data:", error);
      return {
        dailyFees: 0,
        dailyRevenue: 0,
        dailyProtocolRevenue: 0,
        timestamp: getUniqStartOfTodayTimestamp(targetDate),
      };
    }
  };
};

const adapter: SimpleAdapter = {
  version: 2,
  methodology,
  adapter: {
    [CHAIN.SUI]: {
      fetch: fetchData(),
      start: "2025-8-10",
    },
  },
};

export default adapter;
