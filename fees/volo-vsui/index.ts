import { httpGet } from "../../utils/fetchURL";
import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";

const methodology = {
  Fees: "Fees generated by  Volo vaults and Volo Liquid Staking.",
  Revenue: "Revenue generated by Volo vaults and Volo Liquid Staking.",
  ProtocolRevenue: "Revenue generated by Volo vaults and Volo Liquid Staking.",
};

const decimals = {
  '0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC': 6,
  '0x876a4b7bce8aeaef60464c11f4026903e9afacab79b9b142686158aa86560b50::xbtc::XBTC': 8,
  '0xaafb102dd0902f5055cadecd687fb5b71ca82ef0e0285d90afde828ec58ca96b::btc::BTC': 8,
}

async function fetch(_: any, _1: any, { dateString, createBalances }: FetchOptions) {
  const dailyFees = createBalances()
  const dailyRevenue = createBalances()

  const { data: dailyFeesData } = await httpGet(`https://open-api.naviprotocol.io/api/volo/volo-vaults?type=fees&timestamp=${dateString}`)
  const { data: dailyRevenueData } = await httpGet(`https://open-api.naviprotocol.io/api/volo/volo-vaults?type=revenue&timestamp=${dateString}`)

  Object.entries(dailyFeesData).forEach(([key, value]: any) => {
    const decimal = decimals[key]
    if (!decimal)  throw new Error(`Missing decimal for ${key}`)
    dailyFees.add(key, value * (10 ** decimal))
  })
  Object.entries(dailyRevenueData).forEach(([key, value]: any) => {
    const decimal = decimals[key]
    if (!decimal)  throw new Error(`Missing decimal for ${key}`)
    dailyRevenue.add(key, value * (10 ** decimal))
  })

  return {
    dailyFees,
    dailyRevenue,
    dailyProtocolRevenue: dailyRevenue,
    dailyHoldersRevenue: 0,
  };
}

const adapter: SimpleAdapter = {
  methodology,
  start: "2025-08-10",
  fetch,
  chains: [CHAIN.SUI],
};

export default adapter;
