import { CHAIN } from "../../helpers/chains";
import { FetchOptions, FetchResultV2, SimpleAdapter } from "../../adapters/types";
import { getERC4626VaultsInfo } from "../../helpers/erc4626";


const YUSD_CONTRACT = '0x4772D2e014F9fC3a820C444e3313968e9a5C8121'
const VYUSD_CONTRACT = '0xF4F447E6AFa04c9D11Ef0e2fC0d7f19C24Ee55de'

const VAULTS_CONTRACTS: Record<string, Array<string>> = {
    [CHAIN.ETHEREUM]: [
        '0x19Ebd191f7A24ECE672ba13A302212b5eF7F35cb',
        '0x2e3C5e514EEf46727DE1FE44618027A9b70D92FC',
        '0x8464F6eCAe1EA58EC816C13f964030eAb8Ec123A',
        '0x3073112c2c4800b89764973d5790ccc7fba5c9f9',
        '0xa01200b2e74DE6489cF56864E3d76BBc06fc6C43',
        '0x1e2a5622178f93EFd4349E2eB3DbDF2761749e1B',
    ],
}

// management fees per year
const getFeeRate = (chain: string, vault: string): number => {
    if (chain === CHAIN.ETHEREUM) {
        if (vault.toLowerCase() === String('0x8464F6eCAe1EA58EC816C13f964030eAb8Ec123A') || vault.toLowerCase() === String('0x3073112c2c4800b89764973d5790ccc7fba5c9f9')) {
            return 0.01; // 1% per year
        } else if (vault.toLowerCase() === String('0xa01200b2e74DE6489cF56864E3d76BBc06fc6C43') || vault.toLowerCase() === String('0x1e2a5622178f93EFd4349E2eB3DbDF2761749e1B')) {
            return 0.005; // 0.5% per year
        }
    }

    return 0.02; // default 2% per year
}

const fetch = async (options: FetchOptions): Promise<FetchResultV2> => {
    const dailyFees = options.createBalances()
    const dailyRevenue = options.createBalances()

    const vaults: Array<string> = options.chain === CHAIN.ETHEREUM ? VAULTS_CONTRACTS[options.chain] : [YUSD_CONTRACT, VYUSD_CONTRACT]

    const vaultInfosBefore = await getERC4626VaultsInfo(options.fromApi, vaults)
    const vaultInfosAfter = await getERC4626VaultsInfo(options.toApi, vaults)
    for (const vault of Object.keys(vaultInfosBefore)) {
        if (vaultInfosBefore[vault] && vaultInfosAfter[vault]) {
            const totalAssets = Number(vaultInfosAfter[vault].totalAssets) / (10 ** vaultInfosAfter[vault].decimals)
            const growthCumulativeIndex = Number(vaultInfosAfter[vault].assetsPerShare) - Number(vaultInfosBefore[vault].assetsPerShare)
            const growthYields = (growthCumulativeIndex / (10 ** vaultInfosAfter[vault].assetDecimals)) * totalAssets;
            // management fees on totalAssets
            const feeRate = getFeeRate(options.chain, vault)
            const year = 365 * 24 * 3600
            const timeframe = options.toTimestamp - options.fromTimestamp
            const managementFees = totalAssets * feeRate * timeframe / year;

            dailyFees.add(vaultInfosBefore[vault].asset, ((growthYields + managementFees) * (10 ** vaultInfosAfter[vault].decimals)))
            dailyRevenue.add(vaultInfosBefore[vault].asset, (managementFees * (10 ** vaultInfosAfter[vault].decimals)))
        }
    }
    const dailySupplySideRevenue = dailyFees.clone(1)
    dailySupplySideRevenue.subtract(dailyRevenue)

    return {
        dailyFees,
        dailyRevenue,
        dailyProtocolRevenue: dailyRevenue,
        dailySupplySideRevenue,
    };
}

const methodology = {
    Fees: 'Total yield generated by YieldFi across all supported chains + management fees by YieldFi',
    Revenue: 'Total management fees by YieldFi.',
    ProtocolRevenue: 'Total management fees by YieldFi.',
    SupplySideRevenue: 'Total yield generated and distributed to vaults depositors.',
}

const adapter: SimpleAdapter = {
    version: 2,
    fetch,
    methodology,
    adapter: {
        [CHAIN.ETHEREUM]: {
            start: '2024-11-11',
        },
        [CHAIN.OPTIMISM]: {
            start: '2025-04-30',
        },
        [CHAIN.ARBITRUM]: {
            start: '2025-04-30',
        },
        [CHAIN.BASE]: {
            start: '2025-04-30',
        },
        [CHAIN.SONIC]: {
            start: '2025-05-09',
        },
        [CHAIN.PLUME]: {
            start: '2025-06-10',
        },
        [CHAIN.KATANA]: {
            start: '2025-07-31',
        },
        [CHAIN.BSC]: {
            start: '2025-07-27',
        },
        [CHAIN.AVAX]: {
            start: '2025-07-31',
        },
        [CHAIN.TAC]: {
            start: '2025-07-17',
        },
        [CHAIN.PLASMA]: {
            start: '2025-09-30',
        },
    },
};

export default adapter;
