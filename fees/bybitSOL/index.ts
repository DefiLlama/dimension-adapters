import { FetchOptions } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { getSolanaReceived } from "../../helpers/token";
import { getSqlFromFile, queryDuneSql } from "../../helpers/dune";

const STAKE_POOL_FEE_ACCOUNT = "HcacehDEp8W4wSdy2oi4HgVoSWwMJDr1kZwXUBSuFfKK";
const STAKE_POOL_RESERVE_ACCOUNT = "7huMsYqSXb1m4okiAJgQLPTamgHD2GvWhAou7vhzF51r";
const BYBIT_STAKE_POOL_AUTHORITY = "3pFTQjRVwcJHSpUNH5n1hx6Jwx7V3EzJDDHaKuwExyGJ";

const fetch = async (_a: any, _b: any, options: FetchOptions) => {
    const dailyFees = options.createBalances();

    const query = getSqlFromFile("helpers/queries/solana-liquid-staking-fees.sql", {
        start: options.startTimestamp,
        end: options.endTimestamp,
        stake_account: STAKE_POOL_RESERVE_ACCOUNT,
        authority: BYBIT_STAKE_POOL_AUTHORITY
    });
    const stake_rewards = await queryDuneSql(options, query);

    dailyFees.addCGToken("solana", stake_rewards[0].daily_yield != null ? stake_rewards[0].daily_yield : 0);

    const dailyRevenue = await getSolanaReceived({
        options,
        target: STAKE_POOL_FEE_ACCOUNT
    });

    return {
        dailyFees,
        dailyRevenue,
        dailyProtocolRevenue: dailyRevenue,
        dailySupplySideRevenue: dailyFees.subtract(dailyRevenue)
    };
};

const meta = {
    methodology: {
        Fees: 'Staking rewards from staked SOL on bybit staked solana',
        Revenue: 'Includes withdrawal fees and management fees collected by fee collector',
        ProtocolRevenue: 'Revenue going to treasury/team',
        SupplySideRevenue: 'Staking yield received by bbSOL liquid token holders, which is 100% of the staking yield generated by the bybit staked solana',
    }
}

export default {
    version: 1,
    adapter: {
        [CHAIN.SOLANA]: {
            fetch,
            start: "2024-09-07",
            meta
        }
    },
    isExpensiveAdapter: true
};