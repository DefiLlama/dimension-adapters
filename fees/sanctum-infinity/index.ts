/*

Infinity is a multi-LST liquidity pool

10% of trading fees and withdrawal fees go to Sanctum through individual fee accounts
https://github.com/igneous-labs/S/blob/5fe9f64a00f7096317148c91789497b1a64fcb34/libs/s-controller-lib/src/consts.rs

Proof that the deployed program on-chain matches code from repo
https://solscan.io/account/5ocnV1qiCgaQR8Jb8xWnVbApfaygJ8tNoZfgPwsgx9kx#programVerification

Total fees generated by Infinity are then 10x the amount going to Sanctum which is what the query below calculates
Total revenue is what goes to Sanctum: 10% of total fees

*/

import { FetchOptions, SimpleAdapter } from "../../adapters/types";
import { CHAIN } from "../../helpers/chains";
import { queryDuneSql } from "../../helpers/dune";

const fetch: any = async (_a: any, _b: any, options: FetchOptions) => {
  const fees = await queryDuneSql(
    options,
    `
        SELECT
            cast(sum(token_balance_change) * 10 as BIGINT) as daily_fees
        FROM
            solana.account_activity
        WHERE
            address IN (
                select
                    fee_account
                from
                    dune.sanctumso.result_infinity_fee_accounts
            )
            AND block_time >= from_unixtime(${options.startTimestamp})
            AND block_time <= from_unixtime(${options.endTimestamp})
    `
  );

  const dailyFees = options.createBalances();
  dailyFees.addCGToken("solana", fees[0].daily_fees);

  return { dailyFees, dailyRevenue: dailyFees.clone(0.1) };
};

const methodology = {
  Fees: "Total Infinity trading fees (LPs + Sanctum)",
  Revenue: "Infinity trading fees going to Sanctum (10% of total)",
};

const adapter: SimpleAdapter = {
  version: 1,
  adapter: {
    [CHAIN.SOLANA]: {
      fetch: fetch,
      start: "2024-01-01", // First unstake transaction
      meta: {
        methodology,
      },
    },
  },
  isExpensiveAdapter: true,
};

export default adapter;
